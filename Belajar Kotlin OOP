// Materi Selanjutnya.
/** Kotlin Object Oriented Programming.
 *  Kotlin Generic
 * kotlin Collection
 * Kotlin Coroutine
*/ 


// 1.Kotlin OOP: Belajar kotlin Objek Oriented Programming.
// Eko Kurniawan Khannedy
// https://docs.google.com/presentation/d/1aeQWBgd1XE7IRvgC-fkcs6ReL5H2qX5tAi4r66dusok/edit.

// lanjutan kotlin dasar.
// Apa itu Object Oriented Programming?
/** 
 * Object Oriented Programming adalah sudut pandang bahasa pemrograman yang berkonsep “objek”
 * Ada banyak sudut pandang bahasa pemrograman, namun OOP adalah yang sangat populer saat ini.
 * Ada beberapa istilah yang perlu dimengerti dalam OOP, yaitu: Object dan Class
 * */

// Apa itu Object?
/** 
 * Object adalah data yang berisi properties (fields atau attributes) dan functions (methods atau behavior)
 * Semua data di Kotlin adalah object, dari mulai Number, Boolean, Character, String dan yang lainnya
 * */

// Apa itu Class?
/** 
 * Class adalah blueprint, prototype atau cetakan untuk membuat Object
 * Class berisikan deklarasi semua properties dan functions yang dimiliki oleh Object
 * Setiap Object selalu dibuat dari Class
 * Dan sebuah Class bisa membuat Object tanpa batas
*/


// 2.Kotlin OOP: Class .
// Eko Kurniawan Khannedy
// https://docs.google.com/presentation/d/1aeQWBgd1XE7IRvgC-fkcs6ReL5H2qX5tAi4r66dusok/edit.

// Membuat Class
// Untuk membuat class di Kotlin, kita bisa menggunakan kata kunci class
// Membuat class di Kotlin tidak ada aturan harus sama dengan nama file seperti di Java
// Namun agar kodenya rapih dan mudah untuk dimengerti, disarankan untuk membuat nama class dan nama file sama. Misal class Person di file Person.kt

// pilih langsung class di pakkage nya dan nama file sama dengan class
// package belajar.oop

// kode Class
class Person

class Car

class Addres



// 3.Kotlin OOP: Object .
// Eko Kurniawan Khannedy
// https://docs.google.com/presentation/d/1aeQWBgd1XE7IRvgC-fkcs6ReL5H2qX5tAi4r66dusok/edit.

// Membuat Object.
// Membuat Object di Kotlin sangat mudah, mirip seperti memanggil function, dengan menggunakan nama class
// Di Kotlin, tidak butuh kata kunci khusus untuk membuat Object, misal jika di Java kita butuh menggunakan kata kunci new untuk membuat Object

// Kode : Object.

// package belajar.App

class Person

fun main(){
    val eko = Person()
    val asep = Person()
    val kawai = Person()
    
    println(eko)
    println(asep)
    println(kawai)
    
}
// Output nya.
// Person@3941a79c
// Person@b1bc7ed
// Person@7cd84586


// 4.Kotlin OOP: Propertis .
// Eko Kurniawan Khannedy
// https://docs.google.com/presentation/d/1aeQWBgd1XE7IRvgC-fkcs6ReL5H2qX5tAi4r66dusok/edit.


// Apa itu Properties?
// Properties / Fields / Attributes adalah data yang bisa kita sisipkan di dalam Object
// Namun sebelum kita bisa memasukkan data di Properties, kita harus mendeklarasikan data apa aja yang dimiliki object tersebut di dalam deklarasi class-nya
// Membuat Properties sama seperti membuat variable, bisa mutable atau immutable


// Membuat kode : properties.

// package data
class Person {
    var firsName: String = " "
    var middleName: String? = null
    var lastName: String = " "
    
}

// package data
class Car {
    var brand: String = " "
    var year: Int = 2020
    
}


// package data
class Address {
    var sttreet: String = " "
    var city: String ="Yogyakarta"
    var country: String ="Indonesia"
    
    
}


// Apa itu Manipulasi Properties?
// Properties yang ada di object, bisa kita manipulasi. Tergantung mutable atau immutable.
// Jika mutable, berarti kita bisa mengubah data properties nya, namun jika immutable, kita hanya bisa mengambil data properties nya saja
// Untuk memanipulasi data properties, sama seperti cara pada variable
// Untuk mengakses properties, kita butuh kata kunci . (titik) setelah nama object dan diikuti nama properties nya


// Membuat kode : Manipulasi Properties.
class Person{
    var firsName: String = ""
}

fun main(){
    val eko = Person()
    eko.firsName = "Eko"
    
    val joko = Person()
    joko.firsName = "joko"
    
    val budi = Person()
    budi.firsName = "budi"
    
    println(eko.firsName)
    println(joko.firsName)
    println(budi.firsName)
    
    
}


// 5.Kotlin OOP: Constuctor .
// Eko Kurniawan Khannedy
// https://docs.google.com/presentation/d/1aeQWBgd1XE7IRvgC-fkcs6ReL5H2qX5tAi4r66dusok/edit.


// Apa itu Constuctor?
// Saat kita membuat Object, maka kita seperti memanggil sebuah function
// Di dalam class Kotlin, kita bisa membuat Constructors, Constructors mirip seperti function yang akan dipanggil saat pertama kali Object dibuat.
// Mirip seperti di Function, kita bisa memberi parameter pada Constructors


// Membuat kode : Constuctor.
// package data

class Car(paramBrand: String, paramYear: Int = 2020) {
    var brand: String = paramBrand
    var year: Int = paramYear
}

fun main() {
    val avanza = Car("Toyota")
    val alamz = Car("Wuling", 2019)
    
    println(avanza.brand)
    println(avanza.year)
    println(alamz.brand)
    println(alamz.year)
}


// 6. Kotlin OOP: Initialzer Block.
// Eko Kurniawan Khannedy
// https://docs.google.com/presentation/d/1aeQWBgd1XE7IRvgC-fkcs6ReL5H2qX5tAi4r66dusok/edit.


// Apa itu Initialzer Block?
// Initializer Block adalah blok kode yang akan dieksekusi ketika constructor dipanggil
// Kita bisa memasukkan kode program di dalam initializer block



// Membuat kode : Initialzer Block.
// package data

class Car(paramBrand: String, paramYear: Int = 2020) {
    var brand: String
    var year: Int

    init {
        brand = paramBrand
        year = paramYear
        println("Car $brand, Year: $year")
    }
}
