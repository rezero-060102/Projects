belajar kotlin hari ke 7.

29. function.
https://www.youtube.com/watch?v=5PXVYQBmOeo&list=PL-CtdCApEFH_hja5vRJgQOXylCiQud7Qa&index=29

kode : Function Scope.

// Function Scope, harus belajar kostisten semangat.

// fun contohHello(){
    
// }

// fun satu(){
// 	contohHello	    
// }

// fun dua(){
    
// }

fun main(){
   fun contohHelloWorld(){
       println("Hello World")
   }
    
	contohHelloWorld()
    
    
}


30.Return If & When.
(https://www.youtube.com/watch?v=H4LBHnZDm50&list=PL-CtdCApEFH_hja5vRJgQOXylCiQud7Qa&index=30)

Contoh kode return If & When.

// Return If & When.

fun main(){
     
   fun sayHello(name: String = ""): String {
       if (name == ""){
           return "Hello Bro!"
       }else {
           return "Hello $name"
       }
   }
   
   println(sayHello())
   println(sayHello("Kurniawan"))
   
}

// Contoh 2

// Return If & When.

fun main(){
     
   fun sayHello(name: String = ""): String {
      return if (name == ""){ // menghapus di return cuman satu return
            "Hello Bro!"
       }else {
            "Hello $name"
       }
   }
   
   println(sayHello())
   println(sayHello("Kurniawan"))
   
}

// When.

// Return If & When.

fun main() {
    fun sayHello(name: String = ""): String {
        return when (name) {
            "" -> "Hello Bro!"
            else -> "Hello $name"
        }
    }

    // Contoh penggunaan
    println(sayHello()) // Output: Hello Bro!
    println(sayHello("Alice")) // Output: Hello Alice
}

31. Recursive Function.
Contoh kode recursive fuction.

Solutions
Docs
Community
Teach
Play

2.0.21
JVM
Program arguments
Copy link
Share code
Run
fun factorialLoop(value: Int): Int {
    var result = 1;
    for (i in value downTo 1){
    result *= i
}
	return result
}
// Kode : factorial menggunakan For Loop.package
​
fun factorialLoop(value: Int): Int {
    // Pastikan nilai tidak negatif
    if (value < 0) throw IllegalArgumentException("Nilai tidak boleh negatif")
    
    var result = 1
    for (i in value downTo 1) {
        result *= i
    }
    return result
}
​
fun main() {
    // Contoh penggunaan
    println(factorialLoop(5)) // Output: 120
    println(factorialLoop(0)) // Output: 1
}
​
120
1

// kode ini menggunakan recursive dan lebih evesion dalam penggunaan nya.

fun factorialRecursive(value: Int): Int {
    return when (value){
        1 -> 1
        else -> value * factorialRecursive(value - 1)
    }    
}

fun main(){
    println(factorialRecursive(10))
}

32.Tail Recursive Function.
- Kode Tail Recursive Fanction.
// Tail Recursive Function.
// https://docs.google.com/presentation/d/14E169Dpd1q8R7EKxevYitZM8nBoAh5u4HfVJ8YKR1UU/edit?pli=1#slide=id.g72319bb380_0_158

fun main(){
    tailrec fun display(value: Int){
    println(value)
    if (value > 0){
        display( value - 1)
    }
}
	display(10)
}

// contoh 2
fun main(){
    
    fun display(value: Int){
        println("Rexursive $value")
    if (value > 0){
        display(value - 1)
    }
    
}
    display(10)
}

// contoh 3
fun main(){
    
    // tailrec fungsi ini merubah menjadi perulangan biasa.
    tailrec fun display(value: Int){
        println("Rexursive $value")
    if (value > 0){
        display(value - 1)
    }
    
}
    display(1000)
}


// Kode : Taill Recursive Factorial Function.
// Contoh 1
fun main(){
    

    fun factorialRecursiive(value: Int): Int{
        return when (value) {
            1 -> 1
            else -> value * factorialRecursiive(value - 1)
        }
    }
    
    println(factorialRecursiive(100)) 
 // Kenapa hasil nya 0 karena terkenah integer overflow.   
}

// Contoh 2
fun main(){
    
// Di Kotlin, long adalah tipe data yang digunakan untuk menyimpan angka bulat (integer) dengan ukuran yang lebih besar dibandingkan dengan tipe data int. Tipe data long memiliki rentang nilai dari -9,223,372,036,854,775,808 hingga 9,223,372,036,854,775,807, yang membuatnya sangat berguna dalam situasi di mana nilai yang sangat besar atau sangat kecil diperlukan.
    fun factorialRecursiive(value: Long): Long{
        return when (value) {
            1L -> 1L
            else -> value * factorialRecursiive(value - 1)
        }
    }
    
    println(factorialRecursiive(10)) 
   
}


// 33. Lambda Expression di variable.

fun main(){
   
    // membuat lambda expression.
    val contohLambda: (String, String )-> String = { firsName:String, lastName ->
        val result = "$firsName $lastName"
        result
    }
    val result = contohLambda("Kurniawan", "Effendi")
    println(result)
    
}


// Lambda Expression di variable.
// membuat kode : It

fun main(){
   
    // membuat kode : It Ingat kalau int bisa jalan kalau parameter String cuman 1..
 	   val sayHello: (String) -> String = {
           "Hello $it"
       }
    
    println(sayHello("Kurniawan"))
}


// Lambda Expression di variable.
// membuat kode : Method Reference.

fun toUpper(value: String): String = value.toUpperCase()
    

fun main(){
  val toUpperCase : (String) -> String = ::toUpper
    println(toUpperCase("Kurniawan Effendi"))
    
}


// 34. Belajar membuat Higher-Order Function.
// membuat kode : Higher-Order Function.

fun main(){
    
    fun hello(name: String, transfomer: (String) -> String ): String {
        val nameTransfomer = transfomer(name)
        return "Hello $nameTransfomer"
    }
    val lambdaUpper = { value: String -> value.toUpperCase()}
    
    // metode biasa nya
    println(hello("Kurniawan", lambdaUpper))
    
    // metode lain Outpu nya
    println(hello("Kurniawan", { value: String -> value.toUpperCase()} ))
    
}



// membuat kode : Trailing Lambda.

fun main(){
    
    fun hello(name: String, transfomer: (String) -> String ): String {
        val nameTransfomer = transfomer(name)
        return "Hello $nameTransfomer"
    }
    val lambdaUpper = { value: String -> value.toUpperCase()}
    
    // metode biasa nya
    println(hello("Kurniawan", lambdaUpper))
    
    // metode lain Outpu nya
    println(hello("Kurniawan", { value: String -> value.toUpperCase()} ))
    
   // membuat kode : Trailing Lambda. 
    val result = hello("Kurniawan") { value: String ->
    	value.toLowerCase()
    }
}


// 35. Belajar membuat Anonymous Function.
// membuat kode : Anonymous Function.

fun main() {

    fun hello(name: String, transformer: (String) -> String): String { // Mengubah Unit menjadi String
        val nameTransformed = transformer(name) // Memperbaiki nama variabel
        return "Hello $nameTransformed" // Mengembalikan string
    }

    val upper = fun(value: String): String {
        return if (value.isEmpty()) { // Memperbaiki pemeriksaan untuk string kosong
            "Ups"
        } else {
            value.toUpperCase()
        }
    }

    println(hello("Kurniawan", upper))
    println(hello("", upper))
}

// 36. Belajar membuat Closure.
// membuat kode : Closure.
// catatan berhati -hati dalam menggunakan closure kalau salah berakibatkan bisa mengubah data orang lain. 

fun main() {
    var counter: Int = 0

    // Memperbaiki nama lambda
    val lambdaIncrement = {
        println("Lambda Increment")
        counter++
    }

    // Menentukan tipe kembalian untuk fungsi anonim
    val anonymousIncrement: () -> Unit = {
        println("Fungsi Anonim Increment")
        counter++
    }

    // Menambahkan tipe kembalian untuk fungsi biasa
    fun functionIncrement() {
        println("Fungsi Increment")
        counter++
    }

    // Memanggil semua increment
    lambdaIncrement()
    anonymousIncrement()
    functionIncrement()

    // Menampilkan nilai counter akhir
    println(counter)

}

// 36. Belajar membuat Inline Function.
// membuat kode : Inline Function.

// melihat Bytecode Kotlin. https://www.youtube.com/watch?v=b2U98ecql0s&list=PL-CtdCApEFH_hja5vRJgQOXylCiQud7Qa&index=37
inline fun hello(name: () -> String): String {
    return "Hello ${name()}"
}

fun main(){
    println(hello{"Kurniawan"})
    println(hello{"Effendi"})
    
}

// membuat kode : Noinline.

inline fun hello(firsName: () -> String, 
		lastName:() -> String 
                ): String{
    return "Hello ${firsName()} ${firsName()}"
}

fun main(){
    for (i in 0..100)
    println(hello({"Effendi"}, {"Kurniawan"}))
    
}

// membuat kode : Noinline.

inline fun hello(firsName: () -> String, 
		noinline lastName:() -> String 
                ): String{
    return "Hello ${firsName()} ${firsName()}"
}

fun main(){
    for (i in 0..100)
    println(hello({"Effendi"}, {"Kurniawan"}))
    
}


// 36. Belajar membuat label.
// membuat kode : label.

// menampilkan perkalian 1 sampai 10.
fun main(){
    
    for(i in 1..10){
        for (j in 1..10){
            println("$i * $j = ${i * j}")
        }
    }
}

// membuat kode : Break to label.

// menampilkan perkalian 1 sampai 10.
fun main(){
    
    loopi@ for(i in 1..10){
        loopj@ for (j in 1..10){
            println("$i * $j = ${i * j}")
            
            if(i > 5){
                break@loopi
            }
        }
    }
}

// 36. Belajar membuat label.
// membuat kode : Continue to label.

// menampilkan perkalian 1 sampai 4.
fun main(){
    
    loopi@ for(i in 1..10){
        loopj@ for (j in 1..10){
            if(j == 5){
            	continue@loopi
        }
            println("$i * $j = ${i * j}")
              
                
        }
    }
}

// membuat kode : Return to label.

// menampilkan perkalian 1 sampai 4.
fun main() {
    // Fungsi test menerima nama dan operasi yang menghasilkan String
    fun test(name: String, operation: (String) -> String): String = operation(name)

    // Memanggil fungsi test dengan lambda yang mengembalikan String
    val result = test("Kurniawan") { name ->
        println("Eko $name")  // Mencetak nama
        "Hasil dari $name"    // Mengembalikan String
    }

    // Menampilkan hasil
    println(result)
}

